parameters:
  # Common parameters for general customization
  should-checkout:
    description: >
      Boolean for whether or not to checkout as a first step. Default is true.
    type: boolean
    default: true
  should-setup-remote-docker:
    description: >
      Boolean for whether or not to run setup_remote_docker. Default is true.
    type: boolean
    default: true
  should-attach-workspace:
    description: >
      Boolean for whether or not to attach to an existing workspace. Default
      is false.
    type: boolean
    default: false
  workspace-root:
    description: >
      Workspace root path that is either an absolute path or a path relative
      to the working directory. Defaults to ./ci-workspace
    type: string
    default: ci-workspace
  # Specific
  should-restore-cache:
    description: >
      Boolean for whether or not to restore the Yarn cache. Default
      is true.
    type: boolean
    default: true
  should-persist-workspace:
    description: >
      Boolean for whether or not to persist the Yarn cache to the workspace. Default
      is true.
    type: boolean
    default: true
  should-save-cache:
    description: >
      Boolean for whether or not to save the Yarn cache. Default
      is true.
    type: boolean
    default: true
  yarn-cache-key:
    description: >
      Defaults to v1-nodejs-yarn-packages-{{ checksum "yarn.lock" }}-d
    type: string
    default: v1-nodejs-yarn-packages-{{ checksum "yarn.lock" }}-d
  before-build:
    description: "Steps that will be executed before the build"
    type: steps
    default: []
  after-build:
    description: "Steps that will be executed after the build"
    type: steps
    default: []
  node-version:
    description: "Node.js docker image tag"
    type: string
    default: "10"
  e:
    type: executor
    default: nodejs-executor
executor: << parameters.e >>
steps:
  # Setup
  - when:
      condition: << parameters.should-checkout >>
      steps:
        - checkout
  - when:
      condition: << parameters.should-setup-remote-docker >>
      steps:
        - setup_remote_docker
  - when:
      condition: << parameters.should-attach-workspace >>
      steps:
        - attach_workspace:
            at: << parameters.workspace-root >>
  - when:
      condition: << parameters.should-restore-cache >>
      steps:
        - restore_cache:
            name: Restore Yarn Package Cache
            keys:
              - << parameters.yarn-cache-key >>
  - steps: << parameters.before-build >>
  # This makes some assumptions:
  # There is docker-compose.yml file
  # There is a CI service on this docker-compose.yml file
  - run:
      name: "Build"
      command: |
        docker-compose kill
        docker-compose rm -v -f

        if [ ! -f ~/.yarn-cache.tgz ]; then
          echo "existing cache at ~/.yarn-cache.tgz not found. Initializing one."
          tar cvzf ~/.yarn-cache.tgz --files-from /dev/null
        fi

        mv ~/.yarn-cache.tgz ./.yarn-cache.tgz

        echo "List of files on working directory before build:"
        ls -alh ./

        docker-compose build ci
        docker-compose run ci

        echo "retrieving .yarn-cache.tgz from docker image"

        # It would be great if that worked, but the volume does not seems to work
        # So let's do it the hacky way
        # docker-compose run \
        #   --rm \
        #   --no-deps \
        #   --volume `pwd`:/app/output \
        #   --entrypoint /bin/sh ci -c \
        #   "tar czf - /app/.yarn-cache > /app/output/.yarn-cache.tgz && ls -al /app/output"

        # Cp using docker-compose
        # docker-compose run \
        #   --name ci-cp \
        #   -d --no-deps \
        #   --entrypoint /bin/sh ci \
        #   -c "mkdir -p /app/output && tar czf - /app/.yarn-cache > /app/output/.yarn-cache.tgz && tail -f /dev/null"

        # docker cp $(docker-compose ps -q ci):/app/output/.yarn-cache.tgz ./
        # docker-compose down -t 0

        docker run \
          --name ci-cp
          -d --entrypoint /bin/sh project_ci \
          -c "mkdir -p /app/output && tar czf - /app/.yarn-cache > /app/output/.yarn-cache.tgz && tail -f /dev/null"

        docker cp ci-cp:/app/output/.yarn-cache.tgz ./ && docker stop ci-cp
        echo "List of files on working directory after build:"
        ls -alh ./

        mv ./.yarn-cache.tgz ~/.yarn-cache.tgz
  - when:
      condition: << parameters.should-persist-workspace >>
      steps:
        - run: mkdir -p << parameters.workspace-root >>
        - run: cp ~/.yarn-cache.tgz << parameters.workspace-root >>/.yarn-cache.tgz
        - run: ls -alh << parameters.workspace-root >>/.yarn-cache.tgz
        - persist_to_workspace:
            root: << parameters.workspace-root >>
            paths:
              - .yarn-cache.tgz
  - when:
      condition: << parameters.should-save-cache >>
      steps:
        - save_cache:
            name: Save Yarn Package Cache
            key: << parameters.yarn-cache-key >>
            paths:
              - ~/.yarn-cache.tgz
  - steps: << parameters.after-build >>
