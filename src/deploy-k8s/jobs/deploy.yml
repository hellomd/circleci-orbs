parameters:
  # Common parameters for general customization
  should-checkout:
    description: >
      Boolean for whether or not to checkout as a first step. Default is true.
    type: boolean
    default: true
  should-setup-remote-docker:
    description: >
      Boolean for whether or not to run setup_remote_docker
    type: boolean
    default: true
  should-attach-workspace:
    description: >
      Boolean for whether or not to attach to an existing workspace. Default
      is false.
    type: boolean
    default: false
  workspace-root:
    description: >
      Workspace root path that is either an absolute path or a path relative
      to the working directory. Defaults to './ci-workspace'
    type: string
    default: ci-workspace
  # Specific
  before-deploy:
    description: "Steps that will be executed before the deploy script is run"
    type: steps
    default: []
  after-deploy:
    description: "Steps that will be executed after the deploy script is run"
    type: steps
    default: []
  environment:
    description: The environment which will be used when deploying
    type: enum
    enum: ["development", "staging", "production"]
  project-name:
    description: |
      The name of the project, this generally will be the name of the object on Kubernetes.
      Defaults to the CIRCLE_PROJECT_REPONAME environment variable, which is the name of the repository.
    type: string
    default: ${CIRCLE_PROJECT_REPONAME}
  cluster-regions:
    description: |
      The Cluster regions this should be deployed to.
      This can be a comma separated list of identifiers, or *, which means every region
      The default is *
    type: string
    default: "*"
  e:
    type: executor
    default: kube-ci-executor
executor: << parameters.e >>
steps:
  # Setup
  - when:
      condition: << parameters.should-checkout >>
      steps:
        - checkout
  - when:
      condition: << parameters.should-setup-remote-docker >>
      steps:
        - setup_remote_docker
  - when:
      condition: << parameters.should-attach-workspace >>
      steps:
        - attach_workspace:
            at: << parameters.workspace-root >>
  - steps: << parameters.before-deploy >>
  - run:
      name: "Deploy"
      command: |
        # Restore main docker image if any
        # @TODO make this recursive, and save images to a dir inside workspace
        if [[ -f << parameters.workspace-root >>/prebuilt-main-image.tar ]]; then
          docker load -i << parameters.workspace-root >>/prebuilt-main-image.tar
        fi

        # Restore cache for our Node.js deployments
        if [[ -f << parameters.workspace-root >>/.yarn-cache.tgz ]]; then
          cp << parameters.workspace-root >>/.yarn-cache.tgz ./.yarn-cache.tgz
        else
          echo "existing cache at ./.yarn-cache.tgz not found. Initializing one."
          tar cvzf ./.yarn-cache.tgz --files-from /dev/null
        fi

        ls -alh ./.yarn-cache.tgz

        if [[ ! -x /kube-ci/scripts/deploy.sh ]]; then
          echo "/kube-ci/scripts/deploy.sh script not found or not executable." 1>&2
          echo "Make sure the image on the passed executor contains this script." 1>&2
          exit -1
        fi

        /kube-ci/scripts/deploy.sh \
          -r '<< parameters.cluster-regions >>' \
          -e '<< parameters.environment >>' \
          -n '<< parameters.project-name >>'

  - steps: << parameters.after-deploy >>
